name: DeepSource Test Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    env:
      DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Detect project type
      - name: Detect project type
        id: detect-project
        run: |
          if [ -f "package.json" ]; then
            echo "project_type=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
            echo "project_type=python" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            echo "project_type=java" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "project_type=go" >> $GITHUB_OUTPUT
          else
            echo "project_type=unknown" >> $GITHUB_OUTPUT
          fi
          
          # List files in root directory for debugging
          echo "Files in repository root:"
          ls -la
      
      # Setup Node.js (if needed)
      - name: Setup Node.js
        if: steps.detect-project.outputs.project_type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      # Install Node.js dependencies
      - name: Install Node.js dependencies
        if: steps.detect-project.outputs.project_type == 'node'
        run: |
          # Check if package-lock.json exists
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            # Use regular install if no lock file exists
            npm install
          fi
          
          # Install testing tools if needed
          npm install --save-dev jest jest-junit
      
      # Setup Python (if needed)
      - name: Setup Python
        if: steps.detect-project.outputs.project_type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # Install Python dependencies
      - name: Install Python dependencies
        if: steps.detect-project.outputs.project_type == 'python'
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov
      
      # Run tests with coverage (conditional based on project type)
      - name: Run tests with coverage
        run: |
          if [ "${{ steps.detect-project.outputs.project_type }}" == "node" ]; then
            # Node.js project
            npx jest --coverage --coverageReporters=lcov || echo "Tests failed but continuing"
          elif [ "${{ steps.detect-project.outputs.project_type }}" == "python" ]; then
            # Python project
            python -m pytest --cov=./ --cov-report=xml || echo "Tests failed but continuing"
          elif [ "${{ steps.detect-project.outputs.project_type }}" == "java" ]; then
            # Java project - add appropriate commands here
            echo "Java project detected, add specific test commands"
          elif [ "${{ steps.detect-project.outputs.project_type }}" == "go" ]; then
            # Go project
            go test -coverprofile=coverage.out ./... || echo "Tests failed but continuing"
          else
            # Unknown project type
            echo "Could not detect project type. Please customize workflow file for your specific setup."
            # Creating empty coverage file for demonstration
            echo "{}" > coverage.json
          fi
      
      # Install DeepSource CLI
      - name: Install DeepSource CLI
        run: curl https://deepsource.io/cli | sh
      
      # Find coverage files (for debugging)
      - name: Find coverage files
        run: |
          echo "Looking for coverage files..."
          find . -name "*.xml" -o -name "*.info" -o -name "*.out" -o -name "coverage.json" | grep -i coverage || echo "No coverage files found"
      
      # Report coverage to DeepSource
      - name: Report coverage to DeepSource
        run: |
          chmod +x ./bin/deepsource
          
          # Report based on project type
          if [ "${{ steps.detect-project.outputs.project_type }}" == "node" ]; then
            if [ -f "./coverage/lcov.info" ]; then
              ./bin/deepsource report --analyzer test-coverage --key javascript --value-file ./coverage/lcov.info
            else
              echo "Warning: lcov.info not found"
            fi
          elif [ "${{ steps.detect-project.outputs.project_type }}" == "python" ]; then
            if [ -f "./coverage.xml" ]; then
              ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.xml
            else
              echo "Warning: coverage.xml not found"
            fi
          elif [ "${{ steps.detect-project.outputs.project_type }}" == "go" ]; then
            if [ -f "./coverage.out" ]; then
              ./bin/deepsource report --analyzer test-coverage --key go --value-file ./coverage.out
            else
              echo "Warning: coverage.out not found"
            fi
          else
            echo "Please customize this step for your specific project type and coverage format"
          fi
